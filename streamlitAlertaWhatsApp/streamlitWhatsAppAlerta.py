# Importamos las librer√≠as necesarias

# streamlit: Librer√≠a para crear aplicaciones web interactivas.
# Instalaci√≥n: pip install streamlit
import streamlit as st

# pandas: Librer√≠a para manipulaci√≥n y an√°lisis de datos.
# Instalaci√≥n: pip install pandas
import pandas as pd

# plotly.express: Librer√≠a para crear gr√°ficos interactivos.
# Instalaci√≥n: pip install plotly
import plotly.express as px

# requests: Librer√≠a para hacer solicitudes HTTP.
# Instalaci√≥n: pip install requests
import requests

# json: Librer√≠a para trabajar con datos en formato JSON.
# Instalaci√≥n: pip install json # aunque normalmente viene preinstalada con python
import json

# Definimos los par√°metros de configuraci√≥n de la aplicaci√≥n
st.set_page_config(
    page_title="Monitoreo de Metricas",  # T√≠tulo de la p√°gina
    page_icon="üìä",  # √çcono
    layout="wide",  # Forma de layout ancho o compacto
    initial_sidebar_state="expanded"  # Definimos si la barra lateral aparece expandida o colapsada
)

# Funci√≥n para enviar un mensaje de WhatsApp usando la API de 2Chat
def enviarMensajeWhatsApp(mensaje):
    """
    Env√≠a un mensaje de WhatsApp utilizando la API de 2Chat.

    Args:
        mensaje (str): El contenido del mensaje a enviar.

    Returns:
        None
    """
    url = "https://api.p.2chat.io/open/whatsapp/send-message"

    payload = json.dumps({
        "to_number": st.secrets["telefonoMonitoreo"],  # N√∫mero de tel√©fono de destino (configurado en los secretos de Streamlit)
        "from_number": st.secrets["telefonoOrigen"],  # N√∫mero de tel√©fono de origen (configurado en los secretos de Streamlit)
        "text": mensaje,
    })
    headers = {
        'X-User-API-Key': st.secrets["2ChatAPIKey"],  # API Key para autenticaci√≥n (configurado en los secretos de Streamlit)
        'Content-Type': 'application/json'
    }

    response = requests.request("POST", url, headers=headers, data=payload)

# Funci√≥n para generar una alerta si el valor de la medida est√° fuera del rango
def generarAlerta(valorMedida, parMinMonitoreo, parMaxMonitoreo):
    """
    Genera una alerta si el valor de la medida est√° fuera de los par√°metros de monitoreo y env√≠a un mensaje de WhatsApp.

    Args:
        valorMedida (float): El valor de la medida a evaluar.
        parMinMonitoreo (float): El valor m√≠nimo permitido para la medida.
        parMaxMonitoreo (float): El valor m√°ximo permitido para la medida.

    Returns:
        None
    """
    if valorMedida < parMinMonitoreo:
        mensaje = f"üî¥ *ALERTA:* El valor de la medida es {valorMedida} y es menor que el valor m√≠nimo de {parMinMonitoreo}"
    elif valorMedida > parMaxMonitoreo:
        mensaje = f"üî¥ *ALERTA:* El valor de la medida es {valorMedida} y es mayor al valor m√°ximo de {parMaxMonitoreo}"
    enviarMensajeWhatsApp(mensaje)

# Configuraci√≥n de los par√°metros en la barra lateral
with st.sidebar:
    parMinMonitoreo = st.number_input("Rango Minimo", value=15)
    parMaxMonitoreo = st.number_input("Rango Maximo", value=27)
    parVentanaDatos = st.number_input("Ventana de Datos", value=15)
    parSegundosActualizacion = st.number_input("Segundos de Actualizaci√≥n", value=5)

st.header("Monitoreo de M√©tricas")  # T√≠tulo de la aplicaci√≥n

# Inicializaci√≥n del estado de la sesi√≥n
if "ultimaFecha" not in st.session_state:
    st.session_state.ultimaFecha = None
if "ultimoValorEnAlerta" not in st.session_state:
    st.session_state.ultimoValorEnAlerta = False

# Funci√≥n para actualizar los datos peri√≥dicamente
@st.fragment(run_every=parSegundosActualizacion)  # Decorador para ejecutar la funci√≥n cada cierto tiempo
def ActualizarDatos(parMinMonitoreo, parMaxMonitoreo, parVentanaDatos):
    gsheetid = '10bSRhhhD4ZibrRjUZyIWu-Uo2f5dH6ZeL8RrlKHKbQ8'  # ID de la hoja de c√°lculo de Google Sheets
    sheetid = '0'  # ID de la hoja dentro del documento
    url = f'https://docs.google.com/spreadsheets/d/{gsheetid}/export?format=csv&gid={sheetid}&format'  # URL para descargar los datos en formato CSV
    try:
        dfDatos = pd.read_csv(url).tail(parVentanaDatos)  # Cargar los datos de la hoja de c√°lculo y tomar los √∫ltimos 'parVentanaDatos' registros
    except Exception as e:
        st.error(f"Error al cargar los datos: {e}")  # Mostrar un mensaje de error si hay problemas al cargar los datos
        return

    # Crear una gr√°fica de l√≠nea con los datos
    fig = px.line(dfDatos, x='FechaHora', y='Medida', markers=True)  # Crear la gr√°fica de l√≠nea con marcadores
    fig.add_hrect(y0=parMinMonitoreo, y1=parMaxMonitoreo, fillcolor="#DAFFFB", line_color="rgba(0,0,0,0)", opacity=0.5)  # A√±adir una banda horizontal para el rango permitido
    fig.add_hline(y=parMinMonitoreo, line_dash="dot", annotation_text="Minimo", annotation_position="bottom right")  # A√±adir una l√≠nea horizontal para el valor m√≠nimo
    fig.add_hline(y=parMaxMonitoreo, line_dash="dot", annotation_text="Maximo", annotation_position="bottom right")  # A√±adir una l√≠nea horizontal para el valor m√°ximo
    fig.update_yaxes(rangemode="tozero")  # Asegurar que el eje y comience en cero
    st.plotly_chart(fig, use_container_width=True)  # Mostrar la gr√°fica en la aplicaci√≥n Streamlit

    # Obtener el √∫ltimo valor de la medida y la √∫ltima fecha
    valorMedida = dfDatos['Medida'].iloc[-1]
    ultimaFecha = dfDatos['FechaHora'].iloc[-1]

    # Verificar si hay una nueva medida y generar una alerta si est√° fuera del rango
    # Validamos que la √∫ltima fecha sea diferente a la √∫ltima fecha almacenada en el estado de la sesi√≥n
    if ultimaFecha != st.session_state.ultimaFecha:
        st.session_state.ultimaFecha = ultimaFecha  # Actualizar la √∫ltima fecha en el estado de la sesi√≥n

        # Verificar si el valor de la medida est√° fuera del rango permitido
        if valorMedida < parMinMonitoreo or valorMedida > parMaxMonitoreo:
            st.session_state.ultimoValorEnAlerta = True  # Marcar que hay una alerta activa
            generarAlerta(valorMedida, parMinMonitoreo, parMaxMonitoreo)  # Generar la alerta y enviar el mensaje de WhatsApp

        # Si el valor de la medida vuelve al rango normal y hab√≠a una alerta activa, enviar mensaje de resoluci√≥n
        else:
            if st.session_state.ultimoValorEnAlerta:
                st.session_state.ultimoValorEnAlerta = False  # Marcar que la alerta ha sido resuelta
                mensaje = f"‚úÖ *ALERTA RESUELTA:* El valor de la medida ha vuelto al rango normal."
                enviarMensajeWhatsApp(mensaje)  # Enviar el mensaje de resoluci√≥n de alerta

# Llamar a la funci√≥n para actualizar los datos
ActualizarDatos(parMinMonitoreo, parMaxMonitoreo, parVentanaDatos)